import { Mesh, Scene, WebGLRenderer,
  BoxGeometry, Camera, 
  MeshStandardMaterial, MeshBasicMaterial, 
  RingGeometry, sRGBEncoding,
  Vector2, Clock, Raycaster } from 'three';
import { ARButton } from 'three/examples/jsm/webxr/ARButton';
import { OrbitControls } from 'three/examples/jsm/Controls/OrbitControls';

import { resetRock } from './lib/rock';
import { setupRenderer, setupScene } from './lib/setUp';
import { makeCamera, removeEntity } from './lib/Scene';
import { StoneDefault, simulateOneStep, reset } from './lib/skipping';
import { stone, RockState, RockHandling} from './types/types'
import { waterHeight, floorHeight } from './lib/constants';
import { addHeadsup, setText, addButton } from './lib/headsUp';
import { makeFloor, WaterMesh, rippleCallbacks, rain } from './lib/water';


const Pointer = new Vector2();

function onPointerMove( event : any ) {
  Pointer.x = (event.clientX / window.innerWidth) * 2 - 1;
  Pointer.y = - (event.clientY / window.innerHeight) * 2 + 1;
}



class App {
  // WebGL Scene
  Controls : OrbitControls | null = null;
  Clock: Clock | null = null;
  Raycaster : Raycaster | null = null;
  camera : Camera | any;
  scene : Scene | any;
  renderer : any;
  hitTestSourceRequested = false;
  hitTestSource : any;
  controller : any;
  reticle : any;
  box : any;
  rockHandling :  any | RockHandling;

  constructor() {
    this.initXR();
    this.initScene();
    window.addEventListener('resize', this.onWindowResize.bind(this), false);
    this.renderer.setAnimationLoop(this.render.bind(this));
  }

  initXR() {
    this.renderer.xr.enabled = true;
    document.body.appendChild(ARButton.createButton(this.renderer, {sessionInit: {requiredFeatures: ['hit-test']}}));

    this.hitTestSourceRequested = false;
    this.hitTestSource = null;

    this.controller = this.renderer.xr.getController(0);
    this.controller.addEventListener('select', this.onSelect.bind(this));
  }

  initScene() {
    const { Camera, CameraGroup } = makeCamera();
    const { scene, clock, raycaster } = setupScene(document, this.addObjectClickListener);
    const { Renderer, Controls }  = setupRenderer(document);
    this.rockHandling = 
    resetRock(this.scene, this.rockHandling);
    addHeadsup(document, 'Skip a stone', 100, 50, 'header', 22);

    this.Controls = Controls;
    this.Clock = clock;
    this.Raycaster = raycaster;

    this.camera = Camera;
    this.scene = Scene;
    this.renderer = Renderer;
    this.renderer.setPixelRatio(window.devicePixelRatio);
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.renderer.outputEncoding = sRGBEncoding;
    document.body.appendChild(this.renderer.domElement);
  
    //move to setup
    const geometry = new RingGeometry(0.08, 0.10, 32).rotateX(-Math.PI / 2);
    const material = new MeshBasicMaterial();
    this.reticle = new Mesh(geometry, material);
    this.reticle.matrixAutoUpdate = false;
    this.reticle.visible = false;
    this.scene.add(this.reticle);

    const geometry1 = new BoxGeometry(0.1, 0.1, 0.1);
    const material1 = new MeshStandardMaterial({ color: 0x5853e6 });
    this.box = new Mesh(geometry1, material1);
    this.box.visible = false;
    this.scene.add(this.box);
    addButton(document, resetRock, 'button', 120, 170);
  }

  render(_ : any, frame : any) {
    if (frame) {
      if (this.hitTestSourceRequested === false) {
        this.requestHitTestSource();
      }
      if (this.hitTestSource) {
        this.getHitTestResults(frame);
      }
    }

    //this.renderer.render(this.scene, this.camera);
    requestAnimationFrame(this.renderer);
    //update simulation
    /*
    if(Clock && rockHandling.rockMeshes?.length && 
      rockHandling.rockState.valueOf() == RockState.simulation){
      let splash = false;
      let delta = Clock.getDelta(); 
      if (delta > animDelta){
          delta = animDelta;
      }
      const res : THREE.Vector3 = simulateOneStep(rockHandling.stoneSimulation,
          delta, true);
      rockHandling.rockMeshes[0].position.x = res.z;
      rockHandling.rockMeshes[0].position.y = res.y + waterHeight;
      if (rockHandling.rockMeshes[0].position.y > 0 && 
        res.y + waterHeight <=  waterHeight){
        splash = true;
      }
      rockHandling.rockMeshes[0].position.y = res.y + waterHeight;
      rockHandling.rockMeshes[0].position.z = res.x;

       if(splash){
            rain(.25, 4, 0.005, rockHandling.rockMeshes[0].position.x,
              rockHandling.rockMeshes[0].position.z, .3, .3, 40);
              splash = false;
              if(debug)
              {
                  addHeadsup(document, 'Splash', 300, 300, 'splashLabel', 18);
          
                setTimeout(() => {
                  addHeadsup(document, '', 300, 300, 'splashLabel', 18);
                }, 800);
              }
        }
      // update distance label
      if (Scene){
          removeEntity(defaultLabel, Scene);
          setText(rockHandling.rockState, rockHandling.stoneSimulation,
            rockHandling, defaultLabel, defaultLabelFont);
        }
      //done
      if(rockHandling.rockMeshes[0].position.y <= minFloorHeight ||
           rockHandling.rockMeshes[0].position.z > 90){
          if (debug)
          console.debug('done');
          rockHandling.rockState = RockState.simulationDone;
          setTimeout(() => {
             //resetRock();
          }, resetTime);
        }
    }
    */
    this.renderer.setAnimationLoop(function (time : number) {
      rippleCallbacks.forEach(cb => cb(time));
      //renderer.render(Scene, Camera);
    });
    this.renderer.render(this.scene, this.camera)
}

  onWindowResize() {
    this.camera.aspect = window.innerWidth / window.innerHeight;
    this.camera.updateProjectionMatrix();
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.renderer.render(this.scene, this.camera); 
  }

  onSelect() {
    if (this.reticle.visible) {
      this.box.position.setFromMatrixPosition(this.reticle.matrix);
      this.box.position.y += this.box.geometry.parameters.height / 2;
      this.box.visible = true;
    } 
  }

  async requestHitTestSource() {
    const session = this.renderer.xr.getSession();
    session.addEventListener('end', () => {
      this.hitTestSourceRequested = false;
      this.hitTestSource = null;
    });
    const referenceSpace = await session.requestReferenceSpace('viewer');
    this.hitTestSource = await session.requestHitTestSource({ space: referenceSpace, entityTypes: ['plane'] });
    this.hitTestSourceRequested = true;
  }

  getHitTestResults(frame :any) {
    const hitTestResults = frame.getHitTestResults(this.hitTestSource);
    if (hitTestResults.length) {
      const hit = hitTestResults[0];
      const pose = hit.getPose(this.renderer.xr.getReferenceSpace());
      this.reticle.visible = true;
      this.reticle.matrix.fromArray(pose.transform.matrix);
    } else {
      this.reticle.visible = false;
    }
  }

  addObjectClickListener = (
    Scene : THREE.Scene
    ) => {

      let startX = 0;
      let startY = 0;
         /*
    document.onkeydown = function(evt) {
      evt = evt || window.event;
      let isEscape = false;
      if ('key' in evt) {
          isEscape = (evt.key === 'Escape' || evt.key === 'Esc');
      } else {
          isEscape = (evt.keyCode === 27);
      }
      if (isEscape) {
        resetRock(this.scene, this.rockHandling);
      }
    };
   
      document.addEventListener('touchstart', function (event) {
        if (rockHandling.rockMeshes && rockHandling.rockMeshes[0] && rockHandling.intersections &&
          rockHandling.rockState.valueOf() == RockState.start) {
          rockHandling.rockState = RockState.configuring;
          const touch = event.touches[0] || event.changedTouches[0];
          startX = touch.pageX;
          startY = touch.pageY;
          removeEntity(defaultLabel, Scene);
          setText(rockHandling.rockState, 
            rockHandling.stoneSimulation, rockHandling,
            defaultLabel, defaultLabelFont);
        }
        else{
          startX = 0;
          startY = 0;
        }
      })
      document.addEventListener('touchend', function (event) {
          if (rockHandling.rockMeshes && rockHandling.rockState.valueOf() == RockState.configuring) {
              if (debug)
              console.debug('mouseup:' + rockHandling.rockState);
              rockHandling.rockState = RockState.simulation;
              //update label
              removeEntity(defaultLabel, Scene);
              setText(rockHandling.rockState, rockHandling.stoneSimulation,
                rockHandling, defaultLabel, defaultLabelFont);
              if (Controls)
                Controls.enableRotate = true;
          }
      })
     
      document.addEventListener('mousedown', function (event) {
        if (rockHandling.rockMeshes && rockHandling.rockMeshes[0] && rockHandling.intersections &&
          rockHandling.rockState.valueOf() == RockState.start) {
          rockHandling.rockState = RockState.configuring;
          startX = event.pageX;
          startY = event.pageY;
          if (debug)
            console.debug(startY + 'mousedown' + rockHandling.rockState);
          removeEntity(defaultLabel, Scene);
          setText(rockHandling.rockState, rockHandling.stoneSimulation,
            rockHandling, defaultLabel, defaultLabelFont);
        }
        else{
          startX = 0;
          startY = 0;
        }
      });
  
      document.addEventListener('mousemove', function (event) {
        if (Raycaster){
          Raycaster.setFromCamera(Pointer, Camera);
            const intersects = Raycaster.intersectObjects(Scene.children, true);
            if (intersects.length > 0) {
              if ( intersects.length > 0 ) {
                if (rockHandling.intersections != intersects[0].object) {
                  if (rockHandling.intersections && rockHandling.intersections?.material?.emissive) 
                    rockHandling.intersections.material.emissive.setHex(rockHandling.intersections.currentHex);
                  if (intersects[0].object.name == 'boulder' && rockHandling.rockState.valueOf() != RockState.simulation){
                      rockHandling.intersections = intersects[0].object;
                  }
                  else{
                    rockHandling.intersections = null;
                  }
                  if (rockHandling.intersections && rockHandling.intersections?.material?.emissive){
                    rockHandling.intersections.currentHex = rockHandling.intersections.material.emissive.getHex();
                    rockHandling.intersections.material.emissive.setHex( 0xff0000 );
                  }
                }
              } else {
                if (rockHandling.intersections && rockHandling.intersections?.material?.emissive)
                  rockHandling.intersections.material.emissive.setHex(rockHandling.intersections.currentHex);
                rockHandling.intersections = null;
              }
            }
          }
        if (rockHandling.rockMeshes && 
          rockHandling.rockState.valueOf() == RockState.configuring) {
          //const diffX = Math.abs(event.pageX - startX);//weight
          const diffY = Math.abs(event.pageY - startY);
          const delta = 5;
          if (Controls){
            Controls.enableRotate = false;
          }
          if (diffY > delta) {
              const angleDiff = clamp(diffY *.005, -angleIncr,  angleIncr);
              rockHandling.rockMeshes[0].rotateX(angleDiff);
              rockHandling.stoneSimulation.theta = rockHandling.rockMeshes[0].rotation.x;
              //update label
              removeEntity(defaultLabel, Scene);
              setText(rockHandling.rockState, rockHandling.stoneSimulation,
                rockHandling, defaultLabel, defaultLabelFont);
            }
          }
      });
  
      document.addEventListener('mouseup', function (event) {
        if (rockHandling.rockMeshes && rockHandling.rockState.valueOf() == RockState.configuring) {
            if (debug)
            console.debug('mouseup:' + rockHandling.rockState);
            rockHandling.rockState = RockState.simulation;
            //update label
            removeEntity(defaultLabel, Scene);
            setText(rockHandling.rockState, rockHandling.stoneSimulation,
              rockHandling, defaultLabel, defaultLabelFont);
            if (Controls)
              Controls.enableRotate = true;
        }
      });
          */
    };

}

window.addEventListener('DOMContentLoaded', () => {
  new App();
});
